{"version":3,"sources":["baidu.gif","girl.jpeg","Picture.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","originSrc","__webpack_require__","p","webpSrc","preview","dimensions","width","height","type","Picture","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleImgLoad","event","svg","current","style","opacity","target","React","createRef","_this$props","props","img","alt","className","react_default","a","createElement","src","ref","srcSet","onLoad","PureComponent","console","info","baidu","App","src_Picture","girl","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAA,CAAkBC,UAAaC,EAAAC,EAAuB,yBAAAC,QAAyCF,EAAAC,EAAuB,YAAAE,QAAA,27CAAAC,WAAA,CAAu+CC,MAAA,IAAAC,OAAA,GAAAC,KAAA,2BCA7lDV,EAAAC,QAAA,CAAkBC,UAAaC,EAAAC,EAAuB,yBAAAC,QAAyCF,EAAAC,EAAuB,8BAAAE,QAAA,u1DAAAC,WAAA,CAAq5DE,OAAA,KAAAD,MAAA,IAAAE,KAAA,0NC8C5/DC,qBAzCX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAGJI,cAAgB,SAACC,GACbR,EAAKS,IAAIC,QAAQC,MAAMC,QAAU,EACjCJ,EAAMK,OAAOF,MAAMC,QAAU,GAJ7BZ,EAAKS,IAAMK,IAAMC,YAFPf,wEAQL,IAAAgB,EAC2Bb,KAAKc,MAA7BC,EADHF,EACGE,IAAKC,EADRH,EACQG,IAAKC,EADbJ,EACaI,UAClB,OACIC,EAAAC,EAAAC,cAAA,OAAKH,UAAU,WACXC,EAAAC,EAAAC,cAAA,OAAKC,IAAKN,EAAIxB,QACVyB,IAAKA,EACLC,UAAW,OAASA,EACpBK,IAAKtB,KAAKM,MACdY,EAAAC,EAAAC,cAAA,eACIF,EAAAC,EAAAC,cAAA,UAAQG,OAAQR,EAAIzB,QAChBK,KAAK,eACTuB,EAAAC,EAAAC,cAAA,OAAKI,OAAQxB,KAAKI,cACdiB,IAAKN,EAAI5B,UACT6B,IAAKA,EACLC,UAAW,OAASA,aAvBtBQ,wDCEtBC,QAAQC,KAAKC,SAeEC,mLAXX,OACEX,EAAAC,EAAAC,cAAA,OAAKH,UAAU,OACbC,EAAAC,EAAAC,cAAA,UAAQH,UAAU,cAChBC,EAAAC,EAAAC,cAAA,OAAKC,IAAKO,IAAMzC,UAAW6B,IAAI,SAC/BE,EAAAC,EAAAC,cAACU,EAAD,CAASf,IAAKgB,IAAMf,IAAI,UAAUC,UAAU,qBANpCe,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2f65436a.chunk.js","sourcesContent":["module.exports = {\"originSrc\": __webpack_public_path__ + \"static/media/baidu.gif\" , \"webpSrc\": __webpack_public_path__ + \"undefined\" , \"preview\": \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 117 38'%3E%3Cfilter id='b'%3E%3CfeGaussianBlur stdDeviation='12' /%3E%3C/filter%3E%3Cpath fill='%23d8abc5' d='M0 0h117v38H0z'/%3E%3Cg filter='url(%23b)' transform='translate(.5 .5)' fill-opacity='.5'%3E%3Cellipse fill='%232d62ff' rx='1' ry='1' transform='rotate(91.8 19.2 38.4) scale(21.76705 15.93451)'/%3E%3Cpath fill='%23ff1a00' d='M75 18h40v19H75z'/%3E%3Cellipse fill='%23ff2c0f' rx='1' ry='1' transform='matrix(27.79597 4.58048 -1.87961 11.40614 11.6 30.2)'/%3E%3Cellipse fill='%23fff' cx='100' cy='4' rx='34' ry='14'/%3E%3Cpath fill='%23fff' d='M21.8 30.3L-9.7-6l28-24.3L49.6 6z'/%3E%3Cpath fill='%23fff' d='M-13.8-1l53-2 .6 20-53 2zm89.6 36L58.6 12.5l-14.5-1 33.6 11.7zM74 0h43v18H74z'/%3E%3Cellipse fill='%23fff' cx='95' rx='2' ry='53'/%3E%3Cpath fill='%23fff' d='M0 37h117v1H0z'/%3E%3Cellipse fill='%23eb0000' cx='37' cy='32' rx='2' ry='16'/%3E%3Cellipse fill='%230002ef' cx='43' cy='14' rx='5' ry='5'/%3E%3Cpath fill='%23fff' d='M68.5-16l-2.2 38.1L51 10.4l79.8 6.2z'/%3E%3Cpath fill='%23e31613' d='M0 18h15v19H0z'/%3E%3Cellipse fill='%23f8e9ec' cx='8' cy='27' rx='5' ry='7'/%3E%3Cpath fill='%230000e5' d='M44 34h27v3H44z'/%3E%3Cpath fill='%23f5faff' d='M44.9 38.5l-6-13.5L70-7.8 32.4 44z'/%3E%3Cpath fill='%23fff' d='M16 0h4v38h-4z'/%3E%3Cpath fill='%231821e6' d='M54.2 1.2l18 21.4L67 1 49.2 11.6z'/%3E%3Cellipse fill='%23d50000' cx='8' cy='27' rx='6' ry='2'/%3E%3C/g%3E%3C/svg%3E\", \"dimensions\": {\"width\":117,\"height\":38,\"type\":\"gif\"} };","module.exports = {\"originSrc\": __webpack_public_path__ + \"static/media/girl.jpeg\" , \"webpSrc\": __webpack_public_path__ + \"static/media/girl.jpeg.webp\" , \"preview\": \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 668 1002'%3E%3Cfilter id='b'%3E%3CfeGaussianBlur stdDeviation='12' /%3E%3C/filter%3E%3Cpath fill='%234e5659' d='M0 0h665v1002H0z'/%3E%3Cg filter='url(%23b)' transform='translate(2 2) scale(3.91406)' fill-opacity='.5'%3E%3Cellipse rx='1' ry='1' transform='matrix(41.55192 34.52488 -32.92127 39.62192 20.2 118.9)'/%3E%3Cellipse fill='%2395bacc' rx='1' ry='1' transform='matrix(-14.69749 12.37644 -27.75723 -32.96277 103.7 169.1)'/%3E%3Cellipse fill='%23718696' rx='1' ry='1' transform='matrix(-66.41678 -13.87404 10.86789 -52.02594 125.4 29)'/%3E%3Cellipse fill='%23887e70' cx='132' cy='202' rx='42' ry='38'/%3E%3Cpath fill='%23cfdde5' d='M61.6 152l37.6-13.6 4.6-10.8 20.8 18.2z'/%3E%3Cellipse fill='%2318282e' rx='1' ry='1' transform='rotate(-105.2 140.4 8.5) scale(18.69665 60.75365)'/%3E%3Cellipse fill='%23090d08' rx='1' ry='1' transform='rotate(9.6 -329.5 27.6) scale(27.85396 16.58558)'/%3E%3Cpath fill='%23000003' d='M93 187l-15 30 5-61z'/%3E%3Cellipse fill='%23503e30' rx='1' ry='1' transform='rotate(103.4 -61.6 153.8) scale(26.46407 169.00003)'/%3E%3Cellipse fill='%23898173' rx='1' ry='1' transform='rotate(-106.9 83.5 83.5) scale(16.10011 34.08476)'/%3E%3Cpath fill='%23465c6c' d='M16 87l1-32 57 2-1 32z'/%3E%3Cpath fill='%230b130e' d='M0 128h66v40H0z'/%3E%3Cpath fill='%23ffacb8' d='M65 184l6-13 13 15z'/%3E%3Cpath fill='%2380b3cf' d='M67 139h44v26H67z'/%3E%3Cpath fill='%23220e06' d='M61 187h26v27H61z'/%3E%3Cellipse fill='%23213e54' rx='1' ry='1' transform='matrix(-6.73364 24.00696 -39.56947 -11.09872 149.6 124.5)'/%3E%3Cpath fill='%2367a5c6' d='M93 206l-1-47 26 15z'/%3E%3Cpath fill='%231e180c' d='M111.8 166.8L129 162l19.4 4.2-38.2-23.6z'/%3E%3Cpath fill='%23ebdfd5' d='M134 149l-35-24 14 18z'/%3E%3Cpath fill='%23999082' d='M82.9 94.3l-1.7-3.8-2 16.2 52.7 47.6z'/%3E%3C/g%3E%3C/svg%3E\", \"dimensions\": {\"height\":1002,\"width\":668,\"type\":\"jpg\"} };","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport './picture.css'\n\nclass Picture extends PureComponent {\n    constructor() {\n        super();\n        this.svg = React.createRef();\n    }\n    handleImgLoad = (event) => {\n        this.svg.current.style.opacity = 0;\n        event.target.style.opacity = 1;\n    }\n    render() {\n        const { img, alt, className } = this.props;\n        return (\n            <div className='picture'>\n                <img src={img.preview}\n                    alt={alt}\n                    className={'svg ' + className}\n                    ref={this.svg} />\n                <picture>\n                    <source srcSet={img.webpSrc}\n                        type=\"image/webp\"/>\n                    <img onLoad={this.handleImgLoad}\n                        src={img.originSrc}\n                        alt={alt}\n                        className={'img ' + className}\n                    />\n                </picture>\n            </div>\n        )\n    }\n}\n\nPicture.propTypes = {\n    img: PropTypes.shape({\n        // preview: PropTypes.string.isRequired,\n        // src: PropTypes.string.isRequired,\n        originSrc: PropTypes.string.isRequired,\n        webpSrc: PropTypes.string.isRequired,\n    }),\n    alt: PropTypes.string.isRequired,\n    className: PropTypes.string.isRequired,\n}\n\nexport default Picture;","import React, { Component } from 'react';\nimport Picture from './Picture'\nimport girl from './girl.jpeg';\nimport baidu from './baidu.gif';\nimport './App.css';\n\nconsole.info(baidu)\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={baidu.originSrc} alt='logo'/>\n          <Picture img={girl} alt='my girl' className='my-girl' />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}